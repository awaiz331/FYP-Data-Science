# -*- coding: utf-8 -*-
"""Project-ds2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfDiy26aAPqEKoYBNBrslBhz57lK_0Uj
"""

# %% [markdown]
### COVID-19 Chest X-Ray EDA
# **Important Insight**: This dataset lacks severity labels (only binary COVID/non-COVID). Severity scoring requires additional datasets with clinical annotations.
# Steps:
# 1. Download dataset from Kaggle
# 2. Analyze class distribution
# 3. Inspect image characteristics
# 4. Visualize samples
# 5. Discuss severity scoring strategy

# %% [code]
# Install Kaggle API
!pip install -q kaggle
from google.colab import files

# Upload Kaggle API key (download from https://www.kaggle.com/settings)
uploaded = files.upload()
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# %% [code]
# Download and unzip dataset
!kaggle datasets download -d anasmohammedtahir/covidqu
!unzip -q covidqu.zip -d covidqu_data
!rm covidqu.zip

# %% [code]
# Imports
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from collections import Counter


#    ```

# Based on the actual structure, let's modify our paths
import os

# Check what's inside the main directory
base_path = 'covidqu_data'
print("Root directory contents:", os.listdir(base_path))

# Base paths
base_path = 'covidqu_data'
lung_base = os.path.join(base_path, 'Lung Segmentation Data', 'Lung Segmentation Data')
infection_base = os.path.join(base_path, 'Infection Segmentation Data', 'Infection Segmentation Data')

# %% [code]
# 1. Analyze dataset structure
def analyze_structure(path):
    print(f"\nStructure of {path}:")
    for root, dirs, files in os.walk(path):
        level = root.replace(path, '').count(os.sep)
        indent = ' ' * 4 * level
        print(f"{indent}{os.path.basename(root)}/")
        subindent = ' ' * 4 * (level + 1)
        for f in files[:5]:  # Print first 5 files only
            print(f"{subindent}{f}")
        if len(files) > 5:
            print(f"{subindent}...{len(files)-5} more files")

analyze_structure(lung_base)
analyze_structure(infection_base)

# %% [code]
# 2. Create dataframe with all image paths and labels
def build_dataset_df(base_path):
    data = []
    for subset in ['Train', 'Test', 'Val']:
        for class_name in ['COVID-19', 'Non-COVID', 'Normal']:
            # Original images
            img_dir = os.path.join(base_path, subset, class_name, 'images')
            if os.path.exists(img_dir):
                for img_file in os.listdir(img_dir):
                    if img_file.lower().endswith(('.png', '.jpg', '.jpeg')):
                        data.append({
                            'subset': subset,
                            'class': class_name,
                            'type': 'original',
                            'path': os.path.join(img_dir, img_file)
                        })

            # Lung masks
            lung_mask_dir = os.path.join(base_path, subset, class_name, 'lung masks')
            if os.path.exists(lung_mask_dir):
                for mask_file in os.listdir(lung_mask_dir):
                    if mask_file.lower().endswith(('.png', '.jpg', '.jpeg')):
                        data.append({
                            'subset': subset,
                            'class': class_name,
                            'type': 'lung_mask',
                            'path': os.path.join(lung_mask_dir, mask_file)
                        })

    return pd.DataFrame(data)

# Create dataframes for both segmentation types
lung_df = build_dataset_df(lung_base)
infection_df = build_dataset_df(infection_base)

print("\nLung Data Summary:")
print(lung_df.groupby(['subset', 'class', 'type']).size().unstack())

print("\nInfection Data Summary:")
print(infection_df.groupby(['subset', 'class', 'type']).size().unstack())

# %% [code]
# 3. Merge the dataframes to create complete samples
# First ensure we can match files between the two datasets
def extract_base_filename(path):
    """Extract comparable filename from path"""
    filename = os.path.basename(path)
    # Remove possible prefixes/suffixes
    for s in ['_lung_mask', '_infection', '_mask']:
        filename = filename.replace(s, '')
    return filename

# Create matching keys
lung_df['match_key'] = lung_df['path'].apply(extract_base_filename)
infection_df['match_key'] = infection_df['path'].apply(extract_base_filename)

# Merge the dataframes
merged_df = pd.merge(
    lung_df[lung_df['type'] == 'original'],
    lung_df[lung_df['type'] == 'lung_mask'],
    on=['subset', 'class', 'match_key'],
    suffixes=('_original', '_lung_mask')
)

merged_df = pd.merge(
    merged_df,
    infection_df[infection_df['type'] == 'lung_mask'],
    on=['subset', 'class', 'match_key']
)

# Clean up column names
merged_df = merged_df.rename(columns={
    'path': 'infection_mask_path',
    'type': 'infection_mask_type'
})
merged_df = merged_df[[
    'subset', 'class', 'match_key',
    'path_original', 'path_lung_mask', 'infection_mask_path'
]]

print("\nMerged dataset samples:")
print(merged_df.head())

# %% [code]
# 4. Calculate severity scores
def calculate_severity(row):
    try:
        lung_mask = cv2.imread(row['path_lung_mask'], cv2.IMREAD_GRAYSCALE)
        infection_mask = cv2.imread(row['infection_mask_path'], cv2.IMREAD_GRAYSCALE)

        if lung_mask is None or infection_mask is None:
            return np.nan

        # Calculate areas
        lung_area = np.sum(lung_mask > 127)
        infection_area = np.sum(infection_mask > 127)

        return (infection_area / lung_area) * 100 if lung_area > 0 else 0
    except:
        return np.nan

merged_df['severity'] = merged_df.apply(calculate_severity, axis=1)

# Remove rows with missing severity scores
merged_df = merged_df.dropna(subset=['severity'])

print("\nSeverity statistics by class:")
print(merged_df.groupby('class')['severity'].describe())

# %% [code]
# 5. Visualize samples
def visualize_sample(row):
    plt.figure(figsize=(15, 5))

    # Original image
    plt.subplot(1, 4, 1)
    img = cv2.imread(row['path_original'])
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img)
    plt.title(f"Original\n{row['class']}")  # Fixed: using row['class'] instead of undefined class
    plt.axis('off')

    # Lung mask
    plt.subplot(1, 4, 2)
    lung_mask = cv2.imread(row['path_lung_mask'], cv2.IMREAD_GRAYSCALE)
    plt.imshow(lung_mask, cmap='gray')
    plt.title("Lung Mask")
    plt.axis('off')

    # Infection mask
    plt.subplot(1, 4, 3)
    infection_mask = cv2.imread(row['infection_mask_path'], cv2.IMREAD_GRAYSCALE)
    plt.imshow(infection_mask, cmap='hot')
    plt.title("Infection Mask")
    plt.axis('off')

    # Combined
    plt.subplot(1, 4, 4)
    overlay = cv2.addWeighted(cv2.cvtColor(img, cv2.COLOR_RGB2GRAY), 0.7, infection_mask, 0.3, 0)
    plt.imshow(overlay, cmap='viridis')
    plt.title(f"Severity: {row['severity']:.2f}%")
    plt.axis('off')

    plt.tight_layout()
    plt.show()

# Visualize random samples for each class
for class_name in merged_df['class'].unique():
    print(f"\nVisualizing random {class_name} sample:")
    sample = merged_df[merged_df['class'] == class_name].sample(1).iloc[0]
    visualize_sample(sample)



### Next Steps
def preprocess_image(img_path, target_size=(512, 512)):
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, target_size)
    return img / 255.0  # Normalize

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set root paths
lung_root = 'covidqu_data/Lung Segmentation Data/Lung Segmentation Data'
infection_root = 'covidqu_data/Infection Segmentation Data/Infection Segmentation Data'

# Function to count files per class/category
def count_files(root_dir, has_infection_masks=False):
    records = []
    for split in ['Train', 'Val', 'Test']:
        for cls in ['Normal', 'Non-COVID', 'COVID-19']:
            image_dir = os.path.join(root_dir, split, cls, 'images')
            lung_mask_dir = os.path.join(root_dir, split, cls, 'lung masks')
            inf_mask_dir = os.path.join(root_dir, split, cls, 'infection masks') if has_infection_masks else None

            image_count = len(os.listdir(image_dir)) if os.path.exists(image_dir) else 0
            lung_mask_count = len(os.listdir(lung_mask_dir)) if os.path.exists(lung_mask_dir) else 0
            inf_mask_count = len(os.listdir(inf_mask_dir)) if inf_mask_dir and os.path.exists(inf_mask_dir) else None

            records.append({
                'Dataset': 'Infection' if has_infection_masks else 'Lung',
                'Split': split,
                'Class': cls,
                'Images': image_count,
                'Lung Masks': lung_mask_count,
                'Infection Masks': inf_mask_count
            })
    return pd.DataFrame(records)

# Get stats
df_lung = count_files(lung_root)
df_infection = count_files(infection_root, has_infection_masks=True)

# Combine both for joint analysis
df_all = pd.concat([df_lung, df_infection], ignore_index=True)

# Display overview
print(df_all)

# Save to CSV for reference
df_all.to_csv('eda_image_statistics.csv', index=False)

plt.figure(figsize=(12, 6))
sns.barplot(data=df_all, x='Split', y='Images', hue='Class', ci=None)
plt.title('Image Count per Class per Split')
plt.ylabel('Number of Images')
plt.xlabel('Dataset Split')
plt.legend(title='Class')
plt.tight_layout()
plt.show()

melted = df_all.melt(id_vars=['Dataset', 'Split', 'Class'], value_vars=['Lung Masks', 'Infection Masks'])
plt.figure(figsize=(14, 6))
sns.barplot(data=melted, x='Split', y='value', hue='variable')
plt.title('Mask Availability per Split')
plt.ylabel('Number of Masks')
plt.xlabel('Split')
plt.legend(title='Mask Type')
plt.tight_layout()
plt.show()

for dataset in ['Lung', 'Infection']:
    subset = df_all[df_all['Dataset'] == dataset]
    class_counts = subset.groupby('Class')['Images'].sum()
    plt.figure()
    plt.pie(class_counts, labels=class_counts.index, autopct='%1.1f%%')
    plt.title(f'{dataset} Dataset - Class Distribution')
    plt.show()

import cv2
import numpy as np

def visualize_sample(image_path, lung_mask_path=None, infection_mask_path=None):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 3, 1)
    plt.imshow(image, cmap='gray')
    plt.title('Image')

    if lung_mask_path:
        lung_mask = cv2.imread(lung_mask_path, cv2.IMREAD_GRAYSCALE)
        plt.subplot(1, 3, 2)
        plt.imshow(lung_mask, cmap='gray')
        plt.title('Lung Mask')

    if infection_mask_path:
        infection_mask = cv2.imread(infection_mask_path, cv2.IMREAD_GRAYSCALE)
        plt.subplot(1, 3, 3)
        plt.imshow(infection_mask, cmap='gray')
        plt.title('Infection Mask')

    plt.tight_layout()
    plt.show()

# Example usage (adjust the paths):
visualize_sample(
    'covidqu_data/Infection Segmentation Data/Infection Segmentation Data/Train/COVID-19/images/covid_4017.png',
    'covidqu_data/Infection Segmentation Data/Infection Segmentation Data/Train/COVID-19/lung masks/covid_4017.png',
    'covidqu_data/Infection Segmentation Data/Infection Segmentation Data/Train/COVID-19/infection masks/covid_4017.png'
)